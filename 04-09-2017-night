Deploying the Application
----------------------------
includes generating the Google Cloud Datastore indexes required for deployment.

Generating Indexes
----------------------------
When you test and exercise your app on the development server, the development server automatically creates any Cloud Datastore indexes required to run in production
These indexes are generated in target/projectname/WEB-INF/appengine-generated/datastore-indexes-auto.xml and are automatically uploaded when you deploy your app.

To generate indexes so you can deploy your app:
-----------------------------------------------
1. Using the development server, exercise all of the queries supported by the app.

Using the Java Local Development Server
---------------------------------------
The App Engine SDK for Java includes a local development server for testing your application on your computer.
The local development server simulates the App Engine Java runtime environment and all of its services, including Datastore.


Using the Java Local Development Server
-----------------------------------------
mvn clean package
#run the development web server from a command prompt. The command to run is in the SDK's appengine-java-sdk/bin/ directory.
/home/meg/google-cloud-sdk/bin/dev_appserver.py /media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT.war
./home/meg/google-cloud-sdk/bin/appcfg.sh update_indexes /media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT.war
The command takes the location of your application's WAR directory as an argument.

/opt/appengine-java-sdk-1.9.54/bin/dev_appserver.sh /media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT

    Executing [/usr/lib/jvm/java-8-oracle/jre/bin/java, -javaagent:/opt/appengine-java-sdk-1.9.54/lib/agent/appengine-agent.jar, -Xbootclasspath/p:/opt/appengine-java-sdk-1.9.54/lib/override/appengine-dev-jdk-overrides.jar, -classpath, /opt/appengine-java-sdk-1.9.54/lib/appengine-tools-api.jar, com.google.appengine.tools.development.DevAppServerMain, --property=kickstart.user.dir=/home/meg, /media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT]
    Sep 05, 2017 12:15:42 AM com.google.appengine.tools.development.SystemPropertiesManager setSystemProperties
    INFO: Overwriting system property key 'java.util.logging.config.file', value '/opt/appengine-java-sdk-1.9.54/config/sdk/logging.properties' with value 'WEB-INF/logging.properties' from '/media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT/WEB-INF/appengine-web.xml'
    com.google.appengine.tools.development.EnvironmentVariableChecker$IncorrectEnvironmentVariableException: One or more environment variables have been configured in appengine-web.xml that have missing or different values in your local environment. We recommend you use system properties instead, but if you are interacting with legacy code that requires specific environment variables to have specific values, please set these environment variables in your environment before running.
    [Mismatch environmentVariableName=ENDPOINTS_SERVICE_NAME environmentVariableValue=null appEngineWebXmlValue=expense-tracker-178909.appspot.com appEngineWebXmlFile=/media/meg/Round/Meg/Projects/IntelliJ/Expense-Tracker/target/Expense-Tracker-0.0.1-SNAPSHOT/WEB-INF/appengine-web.xml]
            at com.google.appengine.tools.development.EnvironmentVariableChecker.check(EnvironmentVariableChecker.java:75)
            at com.google.appengine.tools.development.ApplicationConfigurationManager.checkEnvironmentVariables(ApplicationConfigurationManager.java:240)
            at com.google.appengine.tools.development.ApplicationConfigurationManager.access$000(ApplicationConfigurationManager.java:32)
            at com.google.appengine.tools.development.ApplicationConfigurationManager$WarModuleConfigurationHandle.checkEnvironmentVariables(ApplicationConfigurationManager.java:394)
            at com.google.appengine.tools.development.JettyContainerService.connectContainer(JettyContainerService.java:210)
            at com.google.appengine.tools.development.AbstractContainerService.createConnection(AbstractContainerService.java:269)
            at com.google.appengine.tools.development.AbstractInstanceHolder.createConnection(AbstractInstanceHolder.java:37)
            at com.google.appengine.tools.development.ManualInstanceHolder.createConnection(ManualInstanceHolder.java:84)
            at com.google.appengine.tools.development.AbstractModule.createConnection(AbstractModule.java:73)
            at com.google.appengine.tools.development.Modules.createConnections(Modules.java:99)
            at com.google.appengine.tools.development.DevAppServerImpl.doStart(DevAppServerImpl.java:241)
            at com.google.appengine.tools.development.DevAppServerImpl.access$000(DevAppServerImpl.java:47)
            at com.google.appengine.tools.development.DevAppServerImpl$1.run(DevAppServerImpl.java:219)
            at com.google.appengine.tools.development.DevAppServerImpl$1.run(DevAppServerImpl.java:217)
            at java.security.AccessController.doPrivileged(Native Method)
            at com.google.appengine.tools.development.DevAppServerImpl.start(DevAppServerImpl.java:217)
            at com.google.appengine.tools.development.DevAppServerMain$StartAction.apply(DevAppServerMain.java:359)
            at com.google.appengine.tools.util.Parser$ParseResult.applyArgs(Parser.java:47)
            at com.google.appengine.tools.development.DevAppServerMain.run(DevAppServerMain.java:223)
            at com.google.appengine.tools.development.DevAppServerMain.main(DevAppServerMain.java:214)


/opt/appengine-java-sdk-1.9.54/bin


https://github.com/objectify/objectify-remotely
http://mussatto.github.io/java/appengine/datastore/objectify/tutorial/2016/10/13/appengine-datastore.html
https://blog.codecentric.de/en/2011/10/google-app-engine-persistence-generic-repositories-with-objectify/

Google Cloud Datastore accessed from App Engine uses indexes for every query your application makes. These indexes are updated whenever an entity changes, so the results can be returned quickly when the app makes a query. To do this, Cloud Datastore needs to know in advance which queries the application will make. You specify which indexes your app needs in a configuration file. The development server can generate the Cloud Datastore index configuration automatically as you test your app.

---------------------------------------------------------------
Download and Install the SDK for App Engine: STANDARD ENVIRONMENT
---------------------------------------------------------------
https://cloud.google.com/appengine/downloads
The instructions for setting up your computer differ by App Engine environment, either the standard environment or the flexible environment.
1. Download the App Engine SDK for Java:
 Unzip the appengine-java-sdk-1.9.54.zip file that you downloaded to a directory of your choice.
 mv appengine /opt
 There is no App Engine installation script that you need to run after unzipping the files.
 #Add the appengine-java-sdk-1.9.54/bin/ directory to your PATH:
 export PATH=$PATH:opt/appengine-java-sdk-1.9.54/bin/

 #Set the javac compiler flags to generate the byte code level required by the App Engine Java runtime you are using, per the tabs below:
 -source 1.8 -target 1.8 //did not work


 1. Create or select a Cloud Platform project in the Cloud Platform Console and then ensure that project includes an App Engine application:
 	Note: This application should be run in a B4_1G instance class for improved performance.
 	Project id: test-endpointframework

 2. Check to see if curl is installed, curl is for testing purposes
 	Ubuntu terminal : curl -V

 3. Update the Cloud SDK and install the Endpoints components:
 	gcloud components update

 4. Make sure that Cloud SDK (gcloud) is authorized to access your data and services on Google Cloud Platform:
 	gcloud auth login

 5. Set the default project to your project ID:
 	gcloud config set project expense-tracker-178909

 6. Adding the project ID to the sample API code

 	You must add the project ID obtained when you created your Cloud project to the sample's pom.xml before you can deploy the code.

 7. Build the Project
 	mvn clean package

 8. Generating the OpenAPI configuration file
 	You use a tool from the Frameworks library to generate an OpenAPI configuration file called openapi.json. This file describes the sample code's REST API.

 	invoke the Endpoints Frameworks tool using this command:
 		mvn exec:java -DGetSwaggerDoc

 9. Deploying the Endpoints configuration
 	To deploy the Endpoints configuration, you use Google Service Management, an infrastructure service of Google Cloud Platform that manages other APIs and services, including services created using Cloud Endpoints.

 	Deploy the OpenAPI configuration file that was generated in the previous section by invoking the following command:

 		gcloud service-management deploy openapi.json

 		This creates a new Cloud Endpoints service with the name in the format YOUR_PROJECT_ID.appspot.com. This name is configured in pom.xml and other configuration files included in the sample. Note that when you deploy the API on App Engine, a DNS record is created using the name format PROJECT_ID.appspot.com, which is the fully qualified domain name (FQDN) that you use when you send requests to the API.

 10. Running the sample locally
 	Set the ENDPOINTS_SERVICE_NAME environment variable to: [YOUR_PROJECT_ID].appspot.com
 		export ENDPOINTS_SERVICE_NAME=expense-tracker-178909.appspot.com

 	Acquire new user credentials to use for Application Default Credentials.
 		gcloud auth application-default login

 	Run the development server:
 		mvn appengine:run


 11. Deploying the API backend
 	So far you have deployed the OpenAPI configuration to Service Management, but you have not yet deployed the code that will serve the API backend. This section walks you through deploying the sample API to App Engine.
 	Note: To deploy the API to App Engine you need to have Apache Maven installed.

 	Deploy the API implementation code using Maven:
 		mvn appengine:deploy


 		2/9/2017
 gcloud app create --region 'us-central'
 mvn appengine:deplploy
  curl \
      -H "Content-Type: application/json" \
      -X POST \
      -d '{"message":"hello world"}' \
      https://test-endpointframework.appspot.com/_ah/api/echo/v1/echo

      https://cloud.google.com/endpoints/docs/frameworks/java/get-started-frameworks-java


 It worked!

 git init
 git remote add origin https://github.com/Garachu/test.git
 git add .
 git commit -m 'first commit'
 git push -u origin master


 SS---mvn clean package


Building and running locally
 mvn clean package
Run the following Maven command to start the application locally:
  mvn appengine:devserver
    Could not find goal 'devserver' in plugin com.google.cloud.tools:appengine-maven-plugin:1.3.1 among available goals deploy, deployCron, deployDispatch, deployDos, deployIndex, deployQueue, genRepoInfoFile, help, run, stage, start, stop ->

 mvn appengine:devserver -U

https://cloud.google.com/appengine/docs/standard/java/gettingstarted/creating-guestbook

Running your application locally
--------------------------------------------------------
https://cloud.google.com/tools/intellij/docs/deploy-local
1. gcloud components install app-engine-java

Note: If you want to migrate from the Java App Engine SDK-based plugin (com.google.appengine.appengine-maven),
to the Google Cloud SDK-based (com.google.cloud.tools.appengine-maven) plugin, read Migrating to the Cloud SDK.

mvn appengine:run

[INFO] The admin console is running at http://localhost:35623/_ah/admin
[INFO] GCLOUD: Sep 05, 2017 7:46:34 AM com.google.appengine.tools.development.DevAppServerImpl doStart
[INFO] GCLOUD: INFO: Dev App Server is now running


https://expense-tracker-178909.appspot.com/_ah/start/expense/test


10. Running the sample locally
 	Set the ENDPOINTS_SERVICE_NAME environment variable to: [YOUR_PROJECT_ID].appspot.com
 		export ENDPOINTS_SERVICE_NAME=expense-tracker-178909.appspot.com

 	Acquire new user credentials to use for Application Default Credentials.
 		gcloud auth application-default login

 	Run the development server:
 		mvn appengine:run
